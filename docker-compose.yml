version: '3.8'

services:
  krakend_ce:
    # The :watch image restarts the service automatically when the configuration files change.
    # Do not use this image in production, it's meant to speed up your testing and development.
    image: devopsfaith/krakend:watch
    volumes:
      - ./gateway/config/krakend:/etc/krakend
    ports:
      - "1234:1234"
      - "8080:8080"
      - "8090:8090"
    command: [ "run", "-d", "-c", "/etc/krakend/krakend.json" ]
    depends_on:
      - auth
      - jaeger
    networks:
      api:


  grafana:
    image: grafana/grafana:9.1.2
    ports:
      - "4000:3000"
    volumes:
      - "./gateway/config/grafana/datasources/all.yml:/etc/grafana/provisioning/datasources/all.yml"
      - "./gateway/config/grafana/dashboards/all.yml:/etc/grafana/provisioning/dashboards/all.yml"
      - "./gateway/config/grafana/krakend:/var/lib/grafana/dashboards/krakend"
    networks:
      api:


  influxdb:
    image: influxdb:1.8.10
    environment:
      - "INFLUXDB_DB=krakend"
      - "INFLUXDB_USER=krakend-dev"
      - "INFLUXDB_USER_PASSWORD=pas5w0rd"
      - "INFLUXDB_ADMIN_USER=admin"
      - "INFLUXDB_ADMIN_PASSWORD=supersecretpassword"
    ports:
      - "8086:8086"
    networks:
      api:


  jaeger:
    image: jaegertracing/all-in-one:1
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      api:


  elasticsearch:
    image: elasticsearch:8.4.1
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
      - "xpack.security.transport.ssl.enabled=false"
      - "xpack.security.http.ssl.enabled=false"
      - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"
    ports:
      - "19200:9200"
      - "9300:9300"
    networks:
      api:


  kibana:
    image: kibana:8.4.1
    ports:
      - "5601:5601"
    networks:
      api:


  logstash:
    image: logstash:8.4.1
    ports:
      - "12201:12201/udp"
      - "5044:5044"
    environment:
      - "xpack.monitoring.elasticsearch.url=http://elasticsearch:9200"
    volumes:
      - ./gateway/config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    command: [ "-f", "/usr/share/logstash/pipeline/logstash.conf" ]
    networks:
      api:


  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672"
    networks:
      api:


  jwt_revoke:
    build:
      context: gateway/images/jwt-revoker
    ports:
      - "9000:8080"
    depends_on:
      - krakend_ce
    restart: always
    networks:
      api:


  auth:
    container_name: bb_auth
    build:
      context: ./auth
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - psql
    volumes:
      - ./auth:/go/src/app
    networks:
      api:
    environment:
      PORT: ${PORT:-80}
      APP_ENV: ${APP_ENV}
      DB_HOST: psql
      DB_PORT: ${DB_PORT:-5432}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SCHEMA: ${DB_SCHEMA}
      JWT_SECRET: ${JWT_SECRET:-e72db3c4881c6a3ab591dd9d26c5714e68f8978d9701734038f9700c249c89bbf35a6d9a952a312818001ffaf939a85c0d99f96d4e2838b861f6c10cdc84cdf4}
      JWT_KID: ${JWT_KID:-sm1}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 10s
      timeout: 10s
      retries: 3

  psql:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - psql_volume:/var/lib/postgresql/data
    networks:
      api:


volumes:
  psql_volume:


networks:
  api:
    driver: bridge
